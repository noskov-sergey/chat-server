// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination mocks/mocks.go -typed true Usecase
//

// Package mock_chats is a generated GoMock package.
package mock_chats

import (
	context "context"
	reflect "reflect"

	model "github.com/noskov-sergey/chat-server/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockUsecase) CreateChat(ctx context.Context, users model.Users) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, users)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockUsecaseMockRecorder) CreateChat(ctx, users any) *MockUsecaseCreateChatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockUsecase)(nil).CreateChat), ctx, users)
	return &MockUsecaseCreateChatCall{Call: call}
}

// MockUsecaseCreateChatCall wrap *gomock.Call
type MockUsecaseCreateChatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsecaseCreateChatCall) Return(arg0 int, arg1 error) *MockUsecaseCreateChatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsecaseCreateChatCall) Do(f func(context.Context, model.Users) (int, error)) *MockUsecaseCreateChatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsecaseCreateChatCall) DoAndReturn(f func(context.Context, model.Users) (int, error)) *MockUsecaseCreateChatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMessage mocks base method.
func (m_2 *MockUsecase) CreateMessage(ctx context.Context, m model.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMessage", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockUsecaseMockRecorder) CreateMessage(ctx, m any) *MockUsecaseCreateMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockUsecase)(nil).CreateMessage), ctx, m)
	return &MockUsecaseCreateMessageCall{Call: call}
}

// MockUsecaseCreateMessageCall wrap *gomock.Call
type MockUsecaseCreateMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsecaseCreateMessageCall) Return(arg0 error) *MockUsecaseCreateMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsecaseCreateMessageCall) Do(f func(context.Context, model.Message) error) *MockUsecaseCreateMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsecaseCreateMessageCall) DoAndReturn(f func(context.Context, model.Message) error) *MockUsecaseCreateMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUsecase) Delete(ctx context.Context, chatID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsecaseMockRecorder) Delete(ctx, chatID any) *MockUsecaseDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsecase)(nil).Delete), ctx, chatID)
	return &MockUsecaseDeleteCall{Call: call}
}

// MockUsecaseDeleteCall wrap *gomock.Call
type MockUsecaseDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsecaseDeleteCall) Return(arg0 error) *MockUsecaseDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsecaseDeleteCall) Do(f func(context.Context, int) error) *MockUsecaseDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsecaseDeleteCall) DoAndReturn(f func(context.Context, int) error) *MockUsecaseDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
